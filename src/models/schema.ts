/* tslint:disable */
/* eslint-disable */
/**
 * Example.com
 * This is an **example** API to demonstrate features of the OpenAPI specification. # Introduction This API definition is intended to to be a good starting point for describing your API in [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md). It also demonstrates features of the [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool and the [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond the standard OpenAPI syntax, we use a few  [vendor extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md). # OpenAPI Specification The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can  understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: contact@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Schema
 */
export interface Schema {
    /**
     * Property name's description (type is string)
     * @type {string}
     * @memberof Schema
     */
    stringProperty?: string;
    /**
     * Notice this only appears in the response.
     * @type {string}
     * @memberof Schema
     */
    readonly readOnlyStringProperty?: string;
    /**
     * Notice this only appears in the request.
     * @type {string}
     * @memberof Schema
     */
    writeOnlyStringProperty?: string;
    /**
     * Property name's description (type is string)
     * @type {string}
     * @memberof Schema
     */
    minLengthString?: string;
    /**
     * Property name's description (type is string)
     * @type {string}
     * @memberof Schema
     */
    maxLengthString?: string;
    /**
     * Property name's description (type is string)
     * @type {string}
     * @memberof Schema
     */
    minAndMaxLengthString?: string;
    /**
     * Property name's description (type is string or null)
     * @type {string}
     * @memberof Schema
     */
    nullableOrStringProperty?: string | null;
    /**
     * Property name's description (type is string)
     * @type {string}
     * @memberof Schema
     */
    stringEnumValues?: SchemaStringEnumValuesEnum;
    /**
     * Property name's description (type is string, format is date-time)
     * @type {Date}
     * @memberof Schema
     */
    stringDateTime?: Date;
    /**
     * Property name's description (type is string, format is date-time)
     * @type {Date}
     * @memberof Schema
     */
    stringDate?: Date;
    /**
     * Property name's description (type is string, format is email)
     * @type {string}
     * @memberof Schema
     */
    stringEmail?: string;
    /**
     * Property name's description (type is string, format is ipv4 address)
     * @type {string}
     * @memberof Schema
     */
    stringIpAddressV4?: string;
    /**
     * Property name's description (type is string, format is ipv6 address)
     * @type {string}
     * @memberof Schema
     */
    stringIpAddressV6?: string;
    /**
     * Property name's description (type is string, format is password)
     * @type {string}
     * @memberof Schema
     */
    stringPassword?: string;
    /**
     * Property name's description (type is string, format is hostname)
     * @type {string}
     * @memberof Schema
     */
    stringHostname?: string;
    /**
     * Property name's description (type is string, format is uri)
     * @type {string}
     * @memberof Schema
     */
    stringUri?: string;
    /**
     * Property name's description (type is string, format is uuid)
     * @type {string}
     * @memberof Schema
     */
    stringUuid?: string;
    /**
     * Property name's description (type is number)
     * @type {number}
     * @memberof Schema
     */
    numberProperty?: number;
    /**
     * Property name's description (type is number, format is float)
     * @type {number}
     * @memberof Schema
     */
    numberFloat?: number;
    /**
     * Property name's description (type is number, format is double)
     * @type {number}
     * @memberof Schema
     */
    numberDouble?: number;
    /**
     * Property name's description (type is number)
     * @type {number}
     * @memberof Schema
     */
    numberGreaterThanOrEquals?: number;
    /**
     * Property name's description (type is number)
     * @type {number}
     * @memberof Schema
     */
    numberGreaterThan?: number;
    /**
     * Property name's description (type is number)
     * @type {number}
     * @memberof Schema
     */
    numberLessThan?: number;
    /**
     * Property name's description (type is number)
     * @type {number}
     * @memberof Schema
     */
    numberLessThanOrEquals?: number;
    /**
     * Property name's description (type is number)
     * @type {number}
     * @memberof Schema
     */
    numberRange?: number;
    /**
     * Property name's description (type is number)
     * @type {number}
     * @memberof Schema
     */
    numberRangeExclusiveMaximum?: number;
    /**
     * Property name's description (type is number)
     * @type {number}
     * @memberof Schema
     */
    numberRangeExclusiveMinimumAndMaximum?: number;
    /**
     * Property name's description (type is number)
     * @type {number}
     * @memberof Schema
     */
    numberMultipleOf?: number;
    /**
     * Property name's description (type is integer)
     * @type {number}
     * @memberof Schema
     */
    integerType?: number;
    /**
     * Property name's description (type is integer, format is int32)
     * @type {number}
     * @memberof Schema
     */
    integer32bit?: number;
    /**
     * Property name's description (type is integer, format is int64)
     * @type {number}
     * @memberof Schema
     */
    integer64bit?: number;
    /**
     * Property name's description (type is boolean)
     * @type {boolean}
     * @memberof Schema
     */
    booleanProperty?: boolean;
}


/**
 * @export
 */
export const SchemaStringEnumValuesEnum = {
    Sample: 'sample',
    Example: 'example',
    Specimen: 'specimen',
    Case: 'case',
    Instance: 'instance',
    Illustration: 'illustration'
} as const;
export type SchemaStringEnumValuesEnum = typeof SchemaStringEnumValuesEnum[keyof typeof SchemaStringEnumValuesEnum];


/**
 * Check if a given object implements the Schema interface.
 */
export function instanceOfSchema(value: object): value is Schema {
    return true;
}

export function SchemaFromJSON(json: any): Schema {
    return SchemaFromJSONTyped(json, false);
}

export function SchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Schema {
    if (json == null) {
        return json;
    }
    return {
        
        'stringProperty': json['stringProperty'] == null ? undefined : json['stringProperty'],
        'readOnlyStringProperty': json['readOnlyStringProperty'] == null ? undefined : json['readOnlyStringProperty'],
        'writeOnlyStringProperty': json['writeOnlyStringProperty'] == null ? undefined : json['writeOnlyStringProperty'],
        'minLengthString': json['minLengthString'] == null ? undefined : json['minLengthString'],
        'maxLengthString': json['maxLengthString'] == null ? undefined : json['maxLengthString'],
        'minAndMaxLengthString': json['minAndMaxLengthString'] == null ? undefined : json['minAndMaxLengthString'],
        'nullableOrStringProperty': json['nullableOrStringProperty'] == null ? undefined : json['nullableOrStringProperty'],
        'stringEnumValues': json['stringEnumValues'] == null ? undefined : json['stringEnumValues'],
        'stringDateTime': json['stringDateTime'] == null ? undefined : (new Date(json['stringDateTime'])),
        'stringDate': json['stringDate'] == null ? undefined : (new Date(json['stringDate'])),
        'stringEmail': json['stringEmail'] == null ? undefined : json['stringEmail'],
        'stringIpAddressV4': json['stringIpAddressV4'] == null ? undefined : json['stringIpAddressV4'],
        'stringIpAddressV6': json['stringIpAddressV6'] == null ? undefined : json['stringIpAddressV6'],
        'stringPassword': json['stringPassword'] == null ? undefined : json['stringPassword'],
        'stringHostname': json['stringHostname'] == null ? undefined : json['stringHostname'],
        'stringUri': json['stringUri'] == null ? undefined : json['stringUri'],
        'stringUuid': json['stringUuid'] == null ? undefined : json['stringUuid'],
        'numberProperty': json['numberProperty'] == null ? undefined : json['numberProperty'],
        'numberFloat': json['numberFloat'] == null ? undefined : json['numberFloat'],
        'numberDouble': json['numberDouble'] == null ? undefined : json['numberDouble'],
        'numberGreaterThanOrEquals': json['numberGreaterThanOrEquals'] == null ? undefined : json['numberGreaterThanOrEquals'],
        'numberGreaterThan': json['numberGreaterThan'] == null ? undefined : json['numberGreaterThan'],
        'numberLessThan': json['numberLessThan'] == null ? undefined : json['numberLessThan'],
        'numberLessThanOrEquals': json['numberLessThanOrEquals'] == null ? undefined : json['numberLessThanOrEquals'],
        'numberRange': json['numberRange'] == null ? undefined : json['numberRange'],
        'numberRangeExclusiveMaximum': json['numberRangeExclusiveMaximum'] == null ? undefined : json['numberRangeExclusiveMaximum'],
        'numberRangeExclusiveMinimumAndMaximum': json['numberRangeExclusiveMinimumAndMaximum'] == null ? undefined : json['numberRangeExclusiveMinimumAndMaximum'],
        'numberMultipleOf': json['numberMultipleOf'] == null ? undefined : json['numberMultipleOf'],
        'integerType': json['integerType'] == null ? undefined : json['integerType'],
        'integer32bit': json['integer32bit'] == null ? undefined : json['integer32bit'],
        'integer64bit': json['integer64bit'] == null ? undefined : json['integer64bit'],
        'booleanProperty': json['booleanProperty'] == null ? undefined : json['booleanProperty'],
    };
}

export function SchemaToJSON(json: any): Schema {
    return SchemaToJSONTyped(json, false);
}

export function SchemaToJSONTyped(value?: Omit<Schema, 'readOnlyStringProperty'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'stringProperty': value['stringProperty'],
        'writeOnlyStringProperty': value['writeOnlyStringProperty'],
        'minLengthString': value['minLengthString'],
        'maxLengthString': value['maxLengthString'],
        'minAndMaxLengthString': value['minAndMaxLengthString'],
        'nullableOrStringProperty': value['nullableOrStringProperty'],
        'stringEnumValues': value['stringEnumValues'],
        'stringDateTime': value['stringDateTime'] == null ? undefined : ((value['stringDateTime']).toISOString()),
        'stringDate': value['stringDate'] == null ? undefined : ((value['stringDate']).toISOString().substring(0,10)),
        'stringEmail': value['stringEmail'],
        'stringIpAddressV4': value['stringIpAddressV4'],
        'stringIpAddressV6': value['stringIpAddressV6'],
        'stringPassword': value['stringPassword'],
        'stringHostname': value['stringHostname'],
        'stringUri': value['stringUri'],
        'stringUuid': value['stringUuid'],
        'numberProperty': value['numberProperty'],
        'numberFloat': value['numberFloat'],
        'numberDouble': value['numberDouble'],
        'numberGreaterThanOrEquals': value['numberGreaterThanOrEquals'],
        'numberGreaterThan': value['numberGreaterThan'],
        'numberLessThan': value['numberLessThan'],
        'numberLessThanOrEquals': value['numberLessThanOrEquals'],
        'numberRange': value['numberRange'],
        'numberRangeExclusiveMaximum': value['numberRangeExclusiveMaximum'],
        'numberRangeExclusiveMinimumAndMaximum': value['numberRangeExclusiveMinimumAndMaximum'],
        'numberMultipleOf': value['numberMultipleOf'],
        'integerType': value['integerType'],
        'integer32bit': value['integer32bit'],
        'integer64bit': value['integer64bit'],
        'booleanProperty': value['booleanProperty'],
    };
}

